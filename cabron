#!/bin/bash
#
# CABRON 0.1b - Here you go!
# 
#   Criado em 07/10/2017
# Alterado em 21/10/2017
# 
# Por: Arch Linux Brasil Dev Team
# Instalação: bash <(curl -s -L http://bit.ly/arch-cabron)
# Maiores informações: https://archlinux-br-dev.github.io/cabron

#############################################
########## Parametros básicos ###############
#############################################
debug=1

if [ $(id -u) != 0 ]; then
   echo "Este script precisa ser usado como root." 1>&2
   exit 1
fi

which dialog 1> /dev/null 2> /dev/null
if [ $? != 0 ]; then
  read -p "O aplicativo dialog não foi encontrado. Deseja instalar? [s/N] " resp
  if [ $resp == [sS] ]; then 
    pacman -S dialog
  else
    echo "Programa abortado."
    exit 1
  fi
fi

#############################################
########### VARS ############################
#############################################
TITULO="Arch Linux Automatic Installer"
SUBTITULO="Arch Linux Automatic Installer"
CABRON_TMP="/tmp/cabron"
CABRON_REPO="https://github.com/archlinux-br-dev/cabron"
CABRON_REPO_RAW="https://raw.githubusercontent.com/archlinux-br-dev/cabron/master"
CABRON_LIB="${CABRON_TMP}/lib"
CABRON_CONFIG="${CABRON_TMP}/config"
CABRON_TEMAS="${CABRON_TMP}/temas"
CABRON_CORES="${CABRON_CONFIG}/color.cfg"
CABRON_DEBUG_LOG="${CABRON_TMP}/debug.log"

[ ! -d $CABRON_TMP ] && mkdir $CABRON_TMP
[ -f $CABRON_DEBUG_LOG ] && :> $CABRON_DEBUG_LOG

if [ ! -d $CABRON_TEMAS ]; then
  mkdir -p $CABRON_TEMAS
  curl -s -L ${CABRON_REPO_RAW}/temas/cabron.cfg -o ${CABRON_TEMAS}/cabron.cfg
  curl -s -L ${CABRON_REPO_RAW}/temas/anywhere.cfg -o ${CABRON_TEMAS}/anywhere.cfg
fi

TEMAS=$(ls -1 ${CABRON_TEMAS}/ | xargs -I{} basename {} .cfg | awk '{print $1, $1 ".cfg"}')
TEMA=$(dialog --backtitle "$TITULO" --title "$SUBTITULO" --menu "Escolha o tema do CABRON" 0 0 2 $TEMAS 3>&1 1>&2 2>&3)

if [ $? != 0 ]; then 
  export DIALOGRC="${CABRON_TEMAS}/anywhere.cfg"
else
  export DIALOGRC="${CABRON_TEMAS}/${TEMA}.cfg"
fi

#############################################
########### FUNÇÕES #########################
#############################################
# Welcome
function welcome() {
  dialog --backtitle "$TITULO" --title "$SUBTITULO" --msgbox "             _ \n  __ _  __ _(_)\n / _\` |/ _\` | |\n| (_| | (_| | |\n \__,_|\__,_|_|" 0 0 --and-widget --yesno "\nContinuar a instalação do Arch Linux?" 0 0 3>&1 1>&2 2>&3
}

# Locales
function locale() {
  LOCALE=$(dialog --backtitle "$TITULO" --title "$SUBTITULO" --ok-label "Avançar" --cancel-label "Sair" --inputbox "Seu locale atual:" 0 0 "br abnt2" 3>&1 1>&2 2>&3)

  if [ $? == 0 ]; then 
    if [ $debug = 1 ]; then
      echo "localectl set-x11-keymap $LOCALE" >> $CABRON_DEBUG_LOG
    else
      localectl set-x11-keymap $LOCALE
    fi
  else
    exit
  fi
}

# Opções
function opts() {
  OPTS=$(dialog --backtitle "$TITULO" --title "$SUBTITULO" --ok-label "Avançar" --cancel-label "Voltar" --checklist "Opções do pacman:" 0 0 0 "Download Total" "" on "Cores" "" off "Reflector" "" on 3>&1 1>&2 2>&3)

  if [ $? == 0 ]; then
    for op in ${OPTS[@]}; do
      case $op in
        "Download Total") 
          sed -i '/TotalDownload/s/^#//g' /etc/pacman.conf
        ;;
        "Cores") 
          sed -i '/Color/s/^#//g' /etc/pacman.conf
        ;;
        "Reflector") 
          pacman -Sy
          pacman -S reflector
          if [ ! -f /etc/pacman.d/mirrorlist.bkp ]; then
            cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bkp
          fi
          reflector --verbose -l 5 --sort rate --save /etc/pacman.d/mirrorlist
        ;;
      esac
    done
  else
    return $?
  fi
}

# Conectividade
function connect() {
  INTERFACES=$(ip -o link show | awk -F': ' '{print $2}' | egrep -v lo | awk '{print v++,$1}')
  INTERFACE=$(dialog --backtitle "$TITULO" --title "$SUBTITULO" --ok-label "Avançar" --cancel-label "Voltar" --menu "Qual sua interface?" 0 0 3 $INTERFACES 3>&1 1>&2 2>&3)

  if [ $? == 0 ]; then
    # https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/
    # e = cabeada, w = wireless | systemd owns the world...
    TIPO=$(echo $INTERFACE | head -c 1)

    if [ "$TIPO" == "e" ]; then
      echo "systemctl start dhcpcd@${INTERFACE}"
    #else
      #pacman -S wpa_supplicant wpa_actiond iw
      #wifi-menu
    fi
  else
    return $?
  fi
  #return $?
}

# Particionamento
function part() {
  DISCOS=$(basename -a $(ls -1 /dev/sd*) | tr -d [0-9] | uniq | awk '{print v++,$1}')
  DISCO=$(dialog --backtitle "$TITULO" --title "$SUBTITULO" --ok-label "Avançar" --cancel-label "Voltar" --menu "Qual seu disco?" 0 0 4 $DISCOS 3>&1 1>&2 2>&3)

  if [ $? == 0 ]; then
    if [ $debug = 1 ]; then
      sfdisk -d $DISCO >> $CABRON_DEBUG_LOG
      sfdisk -d $DISCO > ${CABRON_PATH}/layout.txt
    else
      sfdisk -d $DISCO > ${CABRON_PATH}/layout.txt
    fi
  else

  #if [ $? == 0 ]; then
    #sudo sfdisk -d $DISCO >> $CABRON_TMP/layout.txt
    #LAYOUT_NOVO=$(dialog --backtitle "$TITULO" --title "$SUBTITULO" --editbox $CABRON_TMP/layout.txt 0 0 3>&1 1>&2 2>&3)
    #dialog --backtitle "$TITULO" --title "$SUBTITULO" --msgbox "O CABRON irá rodar o programa cfdisk $DISCO agora.\nRecomendamos um layout com 4 partições.\n- ${DISCO}1 com 513MB, Tipo EFI\n- ${DISCO}2 com 50GB, Tipo ext4,\n- ${DISCO}3 com 4GB, Tipo SWAP\n- ${DISCO}4 com todo o espaço restante, Tipo ext4" 0 0 3>&1 1>&2 2>&3
    #cfdisk $DISCO
  #fi

    return $?
  fi
  # WIP...
  #sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk ${DISCO}
  #   o # clear the in memory partition table
  #   n # new partition
  #   p # primary partition
  #   1 # partition number 1
  #     # default - start at beginning of disk 
  #   +100M # 100 MB boot parttion
  #   n # new partition
  #   p # primary partition
  #   2 # partion number 2
  #     # default, start immediately after preceding partition
  #     # default, extend partition to end of disk
  #   a # make a partition bootable
  #   1 # bootable partition is partition 1 -- /dev/sda1
  #   p # print the in-memory partition table
  #   w # write the partition table
  #   q # and we're done
  # EOF
}

# Formatação
function format() {
  FILESYSTEMS=$(ls -1 /usr/bin/mkfs.* | awk -F'.' '{print $2}' | egrep -vi 'bfs|cramfs|ext2|fat|minix|msdos|udf|ufs' | awk '{print v++,$1}')
  FILESYSTEM=$(dialog --backtitle "$TITULO" --title "$SUBTITULO" --ok-label "Avançar" --cancel-label "Voltar" --menu "Sistema de arquivos? (recomendamos ext4)" 0 0 5 $FILESYSTEMS 3>&1 1>&2 2>&3)

  if [ $? == 0 ]; then
    if [ $debug = 1 ]; then
      echo $FILESYSTEM > $CABRON_DEBUG_LOG
    else
      # Inserir rotina de checagem com dialog e uma contagem regressiva de 10 segundos para a pessoa desistir...
      echo $FILESYSTEM > $CABRON_DEBUG_LOG
    fi
  else
    return $?
  fi

  return $?
}

# Final
function final() {
  dialog --backtitle "$TITULO" --title "$SUBTITULO" --msgbox "Muito obrigado por usar o CABRON!" 0 0 3>&1 1>&2 2>&3
}

proxima=chegada

while : ; do

    case "$proxima" in
        chegada)
            proxima=idioma
            welcome
            ;;
        idioma)
            anterior=chegada
            proxima=opcoes
            locale
            ;;
        opcoes)
            anterior=idioma
            proxima=conectar
            opts
            ;;
        conectar)
            anterior=opcoes
            proxima=particionamento
            connect
            ;;
        particionamento)
            anterior=conectar
            proxima=formatar
            part
            ;;
        formatar)
            anterior=particionamento
            proxima=final
            format
            ;;
        final)
            final
            break
            ;;
        *)
            echo "Janela desconhecida '$proxima'."
            echo Abortando programa...
            exit 1
    esac

    retorno=$?
    [ $retorno -eq 1 ] && proxima=$anterior
    [ $retorno -eq 255 ] && break

done

exit 0